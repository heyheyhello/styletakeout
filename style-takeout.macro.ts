import { createMacro } from 'babel-plugin-macros';
import * as t from '@babel/types';
import fs from 'fs';

import type { MacroHandler } from 'babel-plugin-macros';

// Preprocessor. Does nesting selectors like &:hover {}
// Used in `emotion` and `styled-components`

const classPrefix = 'css-';
const snippets: string[] = [];

// There's no way to do work after all files are processed. Babel operates one
// file at a time so there's no global state or functions. The only way to
// collectively write to a CSS file is `fs.appendFile`

// https://github.com/michalkvasnicak/babel-plugin-css-modules-transform/blob/master/src/utils/extractCssFile.js
// https://github.com/jaredLunde/minify-css.macro/blob/master/src/macro.ts

const mergeTemplateExpression = (node: t.TaggedTemplateExpression): string => {
  let string = '';
  const { quasis, expressions } = node.quasi;
  for (let i = 0; i < expressions.length; i++) {
    string += quasis[i];
    string += expressions[i];
  }
  // There's always one more `quasis` than `expressions`
  string += quasis[quasis.length - 1];
  return string;
};

const styleTakeoutMacro: MacroHandler = ({ references, state }) => {
  references.injectGlobal.forEach(node => {
    if (!t.isTaggedTemplateExpression(node)) {
      throw new Error(`Expected "injectGlobal" to be a TagTemplateExpresson instead was "${node.type}"`);
    }
    const string = mergeTemplateExpression(node);
    // TODO: Do stylis work with global namespace plugin
    snippets.push(string);
    node.remove();
  });
  references.css.forEach(node => {
    if (!t.isTaggedTemplateExpression(node)) {
      throw new Error(`Expected "css" to be a TagTemplateExpresson instead was "${node.type}"`);
    }
    const string = mergeTemplateExpression(node);
    // TODO: Do stylis work with autogenerated class name
    snippets.push(string);
    if (!node.loc) {
      throw new Error('Node didn\'t have location info as "node.loc"');
    }
    const { filename } = state;
    const { line, column } = node.loc.start;
    const tag = `${filename}${line}:${column}`;
    node.replaceWith(t.stringLiteral(`${classPrefix}${tag}`));
  });

  // Leave as async
  fs.appendFile('style.css', snippets.join('\n'), () => {});
};

// Since `createMacro` is typed as `() => any`...
const macro = createMacro(styleTakeoutMacro) as unknown;
const css = macro as (statics: TemplateStringsArray, ...variables: string[]) => string;
const injectGlobal = macro as (statics: TemplateStringsArray, ...variables: string[]) => void;

export default macro;
export { css, injectGlobal };
